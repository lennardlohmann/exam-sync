generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model Exam {
  id        String       @id @default(cuid())
  title     String
  user_id   String       @db.Uuid
  group_id  String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  topics    ExamTopic[]
  group     Group?       @relation(fields: [group_id], references: [id])
  
  @@index([user_id])
  @@index([group_id])
  @@schema("public")
}

model ExamTopic {
  id          String         @id @default(cuid())
  title       String
  description String?
  exam_id     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  exam        Exam           @relation(fields: [exam_id], references: [id], onDelete: Cascade)
  progress    ExamProgress[]
  
  @@index([exam_id])
  @@schema("public")
}

model ExamProgress {
  id             String    @id @default(cuid())
  user_id        String    @db.Uuid
  topic_id       String
  confidence     Int       @default(0) // 0-100
  anonymous      Boolean   @default(false)
  lastUpdated    DateTime  @default(now()) @updatedAt
  topic          ExamTopic @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, topic_id])
  @@index([user_id])
  @@index([topic_id])
  @@schema("public")
}

model Group {
  id        String            @id @default(cuid())
  name      String
  joinId    String            @unique @default(uuid())
  createdAt DateTime          @default(now())
  members   GroupMembership[]
  exams     Exam[]
  @@schema("public")
}

model GroupMembership {
  id        String   @id @default(cuid())
  user_id   String   @db.Uuid
  group_id  String
  joinedAt  DateTime @default(now())
  group     Group    @relation(fields: [group_id], references: [id])
  @@index([user_id])
  @@index([group_id])
  @@schema("public")
}
